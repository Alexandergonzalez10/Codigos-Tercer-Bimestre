#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_ADXL345_U.h>
#include <DFRobotDFPlayerMini.h>

// Definiciones de pines
#define LED_BAR_PIN_1 2
#define LED_BAR_PIN_2 3
#define LED_BAR_PIN_3 4
#define LED_BAR_PIN_4 5
#define LED_BAR_PIN_5 6
#define LED_BAR_PIN_6 7
#define LED_BAR_PIN_7 8
#define LED_BAR_PIN_8 9
#define LED_BAR_PIN_9 10
#define LED_BAR_PIN_10 11

#define ALARM_PIN 12

// Inicializar el sensor ADXL345
Adafruit_ADXL345_Unified accel = Adafruit_ADXL345_Unified(12345);

// Inicializar DFPlayer Mini
SoftwareSerial mySoftwareSerial(13, 14); // RX, TX
DFRobotDFPlayerMini myDFPlayer;

void setup() {
  // Inicializar comunicación serial
  Serial.begin(9600);
  Serial.println("Inicializando...");

  // Inicializar LEDs 
  pinMode(LED_BAR_PIN_1, OUTPUT);
  pinMode(LED_BAR_PIN_2, OUTPUT);
  pinMode(LED_BAR_PIN_3, OUTPUT);
  pinMode(LED_BAR_PIN_4, OUTPUT);
  pinMode(LED_BAR_PIN_5, OUTPUT);
  pinMode(LED_BAR_PIN_6, OUTPUT);
  pinMode(LED_BAR_PIN_7, OUTPUT);
  pinMode(LED_BAR_PIN_8, OUTPUT);
  pinMode(LED_BAR_PIN_9, OUTPUT);
  pinMode(LED_BAR_PIN_10, OUTPUT);

  // Inicializar pin de alarma 
  pinMode(ALARM_PIN, OUTPUT);

  // Inicializar DFPlayer Mini
  mySoftwareSerial.begin(9600);
  if (!myDFPlayer.begin(mySoftwareSerial)) {
    Serial.println("Error al inicializar DFPlayer");
    while (true);
  }
  
  // Inicializar ADXL345
  if (!accel.begin()) {
    Serial.println("Error al inicializar ADXL345");
    while (true);
  }

  Serial.println("Inicialización completa");
}

void loop() {
  // Leer datos del acelerómetro
  sensors_event_t event;
  accel.getEvent(&event);

  // Calcular magnitud de la aceleración
  float acceleration = sqrt(event.acceleration.x * event.acceleration.x +
                            event.acceleration.y * event.acceleration.y +
                            event.acceleration.z * event.acceleration.z);

  // Convertir aceleración a escala de Mercalli (ejemplo de mapeo)
  int mercalliLevel = map(int(acceleration), 0, 30, 1, 10);

  // Mostrar intensidad en la barra de LEDs
  displayIntensity(mercalliLevel);

  // Verificar si la intensidad excede el nivel VI (6 - Fuerte)
  if (mercalliLevel >= 6) {
    activateAlarm();
  } else {
    deactivateAlarm();
  }

  delay(1000); // Retardo para estabilidad, ajustar según sea necesario
}

void displayIntensity(int level) {
  // Reiniciar LEDs
  digitalWrite(LED_BAR_PIN_1, LOW);
  digitalWrite(LED_BAR_PIN_2, LOW);
  digitalWrite(LED_BAR_PIN_3, LOW);
  digitalWrite(LED_BAR_PIN_4, LOW);
  digitalWrite(LED_BAR_PIN_5, LOW);
  digitalWrite(LED_BAR_PIN_6, LOW);
  digitalWrite(LED_BAR_PIN_7, LOW);
  digitalWrite(LED_BAR_PIN_8, LOW);
  digitalWrite(LED_BAR_PIN_9, LOW);
  digitalWrite(LED_BAR_PIN_10, LOW);

  // Mostrar intensidad en la barra de LEDs
  switch (level) {
    case 1:
      digitalWrite(LED_BAR_PIN_1, HIGH);
      break;
    case 2:
      digitalWrite(LED_BAR_PIN_1, HIGH);
      digitalWrite(LED_BAR_PIN_2, HIGH);
      break;
    case 3:
      digitalWrite(LED_BAR_PIN_1, HIGH);
      digitalWrite(LED_BAR_PIN_2, HIGH);
      digitalWrite(LED_BAR_PIN_3, HIGH);
      break;
    case 4:
      digitalWrite(LED_BAR_PIN_1, HIGH);
      digitalWrite(LED_BAR_PIN_2, HIGH);
      digitalWrite(LED_BAR_PIN_3, HIGH);
      digitalWrite(LED_BAR_PIN_4, HIGH);
      break;
    case 5:
      digitalWrite(LED_BAR_PIN_1, HIGH);
      digitalWrite(LED_BAR_PIN_2, HIGH);
      digitalWrite(LED_BAR_PIN_3, HIGH);
      digitalWrite(LED_BAR_PIN_4, HIGH);
      digitalWrite(LED_BAR_PIN_5, HIGH);
      break;
    case 6:
      digitalWrite(LED_BAR_PIN_1, HIGH);
      digitalWrite(LED_BAR_PIN_2, HIGH);
      digitalWrite(LED_BAR_PIN_3, HIGH);
      digitalWrite(LED_BAR_PIN_4, HIGH);
      digitalWrite(LED_BAR_PIN_5, HIGH);
      digitalWrite(LED_BAR_PIN_6, HIGH);
      break;
    case 7:
      digitalWrite(LED_BAR_PIN_1, HIGH);
      digitalWrite(LED_BAR_PIN_2, HIGH);
      digitalWrite(LED_BAR_PIN_3, HIGH);
      digitalWrite(LED_BAR_PIN_4, HIGH);
      digitalWrite(LED_BAR_PIN_5, HIGH);
      digitalWrite(LED_BAR_PIN_6, HIGH);
      digitalWrite(LED_BAR_PIN_7, HIGH);
      break;
    case 8:
      digitalWrite(LED_BAR_PIN_1, HIGH);
      digitalWrite(LED_BAR_PIN_2, HIGH);
      digitalWrite(LED_BAR_PIN_3, HIGH);
      digitalWrite(LED_BAR_PIN_4, HIGH);
      digitalWrite(LED_BAR_PIN_5, HIGH);
      digitalWrite(LED_BAR_PIN_6, HIGH);
      digitalWrite(LED_BAR_PIN_7, HIGH);
      digitalWrite(LED_BAR_PIN_8, HIGH);
      break;
    case 9:
      digitalWrite(LED_BAR_PIN_1, HIGH);
      digitalWrite(LED_BAR_PIN_2, HIGH);
      digitalWrite(LED_BAR_PIN_3, HIGH);
      digitalWrite(LED_BAR_PIN_4, HIGH);
      digitalWrite(LED_BAR_PIN_5, HIGH);
      digitalWrite(LED_BAR_PIN_6, HIGH);
      digitalWrite(LED_BAR_PIN_7, HIGH);
      digitalWrite(LED_BAR_PIN_8, HIGH);
      digitalWrite(LED_BAR_PIN_9, HIGH);
      break;
    case 10:
      digitalWrite(LED_BAR_PIN_1, HIGH);
      digitalWrite(LED_BAR_PIN_2, HIGH);
      digitalWrite(LED_BAR_PIN_3, HIGH);
      digitalWrite(LED_BAR_PIN_4, HIGH);
      digitalWrite(LED_BAR_PIN_5, HIGH);
      digitalWrite(LED_BAR_PIN_6, HIGH);
      digitalWrite(LED_BAR_PIN_7, HIGH);
      digitalWrite(LED_BAR_PIN_8, HIGH);
      digitalWrite(LED_BAR_PIN_9, HIGH);
      digitalWrite(LED_BAR_PIN_10, HIGH);
      break;
    default:
      break;
  }
}

void activateAlarm() {
  // Activar sonido de alarma usando DFPlayer Mini
  myDFPlayer.play(1); // Suponiendo que el archivo de sonido 001.mp3 es el sonido de alarma, ajustar según sea necesario
  digitalWrite(ALARM_PIN, HIGH); // Opcionalmente, activar una señal de alarma externa
}

void deactivateAlarm() {
  // Detener sonido de alarma y desactivar señal de alarma externa
  myDFPlayer.stop();
  digitalWrite(ALARM_PIN, LOW);
}
